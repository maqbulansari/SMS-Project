const mongoose = require('mongoose');

const imageSchema = new mongoose.Schema({
  filename: String,
  mimetype: String,
  size: Number,
  data: Buffer,
  uploadedAt: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model('Image', imageSchema);


const Image = require('../models/Image');

// Upload image
exports.uploadImage = async (req, res) => {
  try {
    const file = req.file;

    if (!file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    const newImage = new Image({
      filename: file.originalname,
      mimetype: file.mimetype,
      size: file.size,
      data: file.buffer,
    });

    const savedImage = await newImage.save();

    res.status(201).json({
      message: 'Image uploaded successfully',
      imageId: savedImage._id,
    });
  } catch (err) {
    res.status(500).json({ error: 'Upload failed', details: err.message });
  }
};

// Get image by ID
exports.getImageById = async (req, res) => {
  try {
    const image = await Image.findById(req.params.id);

    if (!image) {
      return res.status(404).json({ error: 'Image not found' });
    }

    res.set('Content-Type', image.mimetype);
    res.send(image.data);
  } catch (err) {
    res.status(500).json({ error: 'Fetch failed', details: err.message });
  }
};



const express = require('express');
const router = express.Router();
const multer = require('multer');
const imageController = require('../controllers/imageController');

// Use memoryStorage so files aren't saved to disk
const storage = multer.memoryStorage();
const upload = multer({ storage });

// Routes
router.post('/upload', upload.single('file'), imageController.uploadImage);
router.get('/:id', imageController.getImageById);

module.exports = router;



const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const imageRoutes = require('./routes/imageRoutes');

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// MongoDB connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.error(err));

app.use('/api/images', imageRoutes);

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
